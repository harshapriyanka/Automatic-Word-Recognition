# -*- coding: utf-8 -*-
"""EndpointDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kYaQxaQ8hOO6Wme1HYf5ecr8yMIpyx-K
"""

#from google.colab import drive
#drive.mount('/content/gdrive')

"""In this file I have implemented Endpoint Detection using Energy of the signal.
Steps for endpoint detection
1. Cut the data into many segments.
2. Calculate energy for each of the segments and check is it is less than a threshold, the threshold which worked
    for most of the data was 0.001. Hamming window was used to obtain the energy of the signal in the window.
3. Find the speech start and the endpoints
4. Slice the audio file in that duration and obtain a cut version of the audio

In this, I used a window of size 25ms and half window size of 12.5ms


NOTE: This cut was applied to all the data points in the data and stored in a new folder and used thereafter
      for the assignment. 
"""


import sys
import soundfile as sf
from math import *
import os

def readfile(fname):
    '''
    Function to read file using soundfile package
    '''
    return sf.read(fname)
    

def cut_file(audiofile):
    '''
    Cutting the file into several chunks of the data
    '''
    global sr
    res = []
    for i in range(0, len(audiofile)-1, int(sr/80)):
        res.append(audiofile[i:min(i+int(sr/40), len(audiofile)-1)])
    return res

# hamming window
def hamming(N, m):
    '''
    Hamming window formula
    '''
    return (0.54-0.46*cos(2*3.1415926*m/(N-1)))


def get_energy(window):
    '''
    Energy Calculation
    '''
    N = len(window)
    res = 0
    for m in range(0, N):
        res += window[m]*hamming(N, N-m)*window[m]*hamming(N, N-m)
    return res

dir = "./Commands Dataset/train/"
# dir = "./Commands Dataset/test_clean/"

for f in os.listdir(dir):
    if (f[-4:]!= ".zip"):
        print(f)
        for w in os.listdir(dir + f):
            filename = dir+ f + '/' + w
            audiofile, sr = readfile(filename)
            windows = cut_file(audiofile)

            sil_before = True
            sil_start = 0
            speech_start = 0
            start_index = 0
            end_index = 0

            for i in range(len(windows)):
                if(get_energy(windows[i]) > 0.001):
                    if(sil_before):
                        sil_before = False
                        speech_start = i
                        start_index = round((i*12.5)*sr*1e-3)

                else:
                    if(not sil_before):
                        sil_before = True
                        sil_start = i
                        end_index = round((i*12.5)*sr*1e-3)

            cut_data = audiofile[int(start_index):int(end_index)]
            sf.write("./Processed_Dataset/train/"+f+'/'+w, cut_data, sr, 'PCM_24')  
            # sf.write("./Processed_Dataset/test_clean/"+f+'/'+w, cut_data, sr, 'PCM_24') 

            # print("Number of data points in original sample: {}".format(len(audiofile)))
            # print("Number of data points in endpointed sample: {}".format(len(cut_data)))


